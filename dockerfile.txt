# ==============================================
# DOCKERFILE MULTI-STAGE OTIMIZADO
# Lunara Afiliados - Next.js Application
# ==============================================

# Definir argumentos globais
ARG NODE_VERSION=18
ARG ALPINE_VERSION=3.18

# ==============================================
# STAGE 1: Base - Preparação do ambiente
# ==============================================
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base

# Instalar dependências do sistema necessárias
RUN apk add --no-cache \
    libc6-compat \
    dumb-init \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Configurar usuário não-root para segurança
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

# Definir diretório de trabalho
WORKDIR /app

# Configurar variáveis de ambiente
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# ==============================================
# STAGE 2: Dependencies - Instalação de dependências
# ==============================================
FROM base AS deps

# Copiar arquivos de configuração de dependências
COPY package.json package-lock.json* ./

# Instalar dependências com otimizações
RUN npm ci --only=production --frozen-lockfile \
    && npm cache clean --force

# ==============================================
# STAGE 3: Build - Construção da aplicação
# ==============================================
FROM base AS builder

# Copiar dependências da stage anterior
COPY --from=deps /app/node_modules ./node_modules

# Copiar código fonte
COPY . .

# Argumentos de build
ARG BUILD_ID
ARG NODE_ENV=production

# Variáveis de ambiente necessárias para o build
ENV BUILD_ID=${BUILD_ID}
ENV NODE_ENV=${NODE_ENV}

# Instalar dependências de desenvolvimento para build
RUN npm ci --include=dev --frozen-lockfile

# Executar build
RUN npm run build

# Limpar dependências de desenvolvimento
RUN npm prune --production

# ==============================================
# STAGE 4: Runtime - Imagem final de produção
# ==============================================
FROM base AS production

# Copiar dependências de produção
COPY --from=deps /app/node_modules ./node_modules

# Copiar arquivos de build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Criar diretórios necessários com permissões corretas
RUN mkdir -p /app/logs /app/uploads \
    && chown -R nextjs:nodejs /app/logs /app/uploads \
    && chmod 755 /app/logs /app/uploads

# Expor porta
EXPOSE 3000

# Mudar para usuário não-root
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Comando de inicialização
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]

# ==============================================
# STAGE 5: Development - Imagem para desenvolvimento
# ==============================================
FROM base AS development

# Instalar dependências de desenvolvimento
RUN apk add --no-cache git

# Copiar package.json
COPY package.json package-lock.json* ./

# Instalar todas as dependências (incluindo dev)
RUN npm ci --include=dev

# Criar diretórios
RUN mkdir -p /app/logs /app/uploads \
    && chown -R nextjs:nodejs /app \
    && chmod 755 /app/logs /app/uploads

# Expor porta
EXPOSE 3000

# Mudar para usuário não-root
USER nextjs

# Comando para desenvolvimento
CMD ["npm", "run", "dev"]

# ==============================================
# STAGE 6: Testing - Imagem para testes
# ==============================================
FROM development AS testing

# Copiar código fonte
COPY --chown=nextjs:nodejs . .

# Executar testes
RUN npm run test:ci

# Executar linting
RUN npm run lint

# Executar verificação de tipos
RUN npm run type-check

# ==============================================
# LABELS E METADATA
# ==============================================
LABEL maintainer="Lunara Afiliados <dev@lunara-afiliados.com>"
LABEL version="1.0.0"
LABEL description="Sistema de gestão de afiliados para terapeutas"
LABEL org.opencontainers.image.title="Lunara Afiliados"
LABEL org.opencontainers.image.description="Sistema de gestão de afiliados para terapeutas e clínicas"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="Lunara Afiliados"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/lunara/afiliados"
LABEL org.opencontainers.image.documentation="https://docs.lunara-afiliados.com"

# ==============================================
# CONFIGURAÇÕES DE SEGURANÇA
# ==============================================

# Remove packages desnecessários na imagem final
RUN if [ "$NODE_ENV" = "production" ]; then \
        apk del --purge git curl && \
        rm -rf /var/cache/apk/* /tmp/* /var/tmp/*; \
    fi

# Configurações de segurança do Node.js
ENV NODE_OPTIONS="--max-old-space-size=1024 --enable-source-maps"

# ==============================================
# INSTRUÇÕES DE BUILD
# ==============================================

# Build para produção:
# docker build --target production -t lunara-afiliados:latest .

# Build para desenvolvimento:
# docker build --target development -t lunara-afiliados:dev .

# Build para testes:
# docker build --target testing -t lunara-afiliados:test .

# Build com argumentos personalizados:
# docker build --build-arg BUILD_ID=$(date +%s) --target production -t lunara-afiliados:latest .

# ==============================================
# OTIMIZAÇÕES IMPLEMENTADAS
# ==============================================

# 1. Multi-stage build para reduzir tamanho da imagem final
# 2. Uso de Alpine Linux para menor surface de ataque
# 3. Usuário não-root para segurança
# 4. Cache de layers otimizado
# 5. Remoção de dependências desnecessárias
# 6. Health checks implementados
# 7. Labels para metadata
# 8. Configurações específicas por ambiente
# 9. Otimizações de memória Node.js
# 10. Limpeza de arquivos temporários

# ==============================================
# EXEMPLO DE USO COM DOCKER COMPOSE
# ==============================================

# development:
#   docker-compose up --build

# production:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build

# testing:
#   docker-compose -f docker-compose.test.yml up --build