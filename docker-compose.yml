version: '3.8'

# Rede customizada para isolamento
networks:
  lunara-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

services:
  # ==============================================
  # BANCO DE DADOS POSTGRESQL
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-lunara-postgres}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lunara_afiliados}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      lunara-network:
        ipv4_address: 172.20.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-lunara_afiliados}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ==============================================
  # CACHE REDIS
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-lunara-redis}
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-lunara_redis_pass}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      lunara-network:
        ipv4_address: 172.20.0.3
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # ==============================================
  # APLICAÇÃO NEXT.JS
  # ==============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - BUILD_ID=${BUILD_ID:-latest}
    container_name: lunara-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-lunara_afiliados}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-lunara_redis_pass}@redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - uploads_data:/app/public/uploads
      - ./logs:/app/logs
    networks:
      lunara-network:
        ipv4_address: 172.20.0.4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ==============================================
  # NGINX PROXY (OPCIONAL - PARA PRODUÇÃO)
  # ==============================================
  nginx:
    image: nginx:alpine
    container_name: lunara-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
    networks:
      lunara-network:
        ipv4_address: 172.20.0.5
    depends_on:
      - app
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # BACKUP SERVICE (OPCIONAL)
  # ==============================================
  backup:
    image: postgres:15-alpine
    container_name: lunara-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh:ro
    networks:
      - lunara-network
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["sh", "/backup.sh"]
    profiles:
      - backup

  # ==============================================
  # MONITORING - PROMETEUS (OPCIONAL)
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: lunara-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/data:/prometheus
    networks:
      - lunara-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ==============================================
  # GRAFANA (OPCIONAL)
  # ==============================================
  grafana:
    image: grafana/grafana:latest
    container_name: lunara-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./docker/grafana/data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - lunara-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # ==============================================
  # MAILHOG (PARA DESENVOLVIMENTO)
  # ==============================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: lunara-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - lunara-network
    profiles:
      - development

# ==============================================
# CONFIGURAÇÕES ESPECÍFICAS POR AMBIENTE
# ==============================================

# Para desenvolvimento
x-development: &development
  environment:
    - NODE_ENV=development
    - DEBUG=true
  volumes:
    - .:/app
    - /app/node_modules
    - /app/.next

# Para produção  
x-production: &production
  environment:
    - NODE_ENV=production
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp
    - /app/.next/cache